# This config determines the keybind setup

#######
# bind = MODS, key, dispatcher (program), [rules... ] params
# bind = SUPER, E, exec, [workspace 2 silent; float; move 0 0] kitty
#
# mods: SUPER | SUPERSHIFT | SUPER+SHIFT | SUPER and SHIFT | CTRL_SHIFT (doesn't matter, except the ',' symbol)
#
# dispatchers: exec | execr | pass | sendshortcut | killactive | closewindow | \
# workspace | movetoworkspace | movetoworkspacesilent | togglefloating | setfloating | \
# settiled | fullscreen (0/1 [maximize]) | fullscreenstate | dpms (deprecated) | pin | movefocus | \
# movewindow | resizewindow | swapwindow | centerwindow | resize[windowpixel/active] | move[windowpixel/active] \
# cyclenext | swapnext | tagwindow | focuswindow | focusmonitor | splitratio | movecursor | \
# renameworkspace | exit | forcerenderreload | move[current]workspacetomonitor | focusworkspaceoncurrentmonitor | \
# swapactiveworkspaces | alterzorder | togglespecialworkspace | focusurgentorlast | togglegroup | \
# changegroupactive | focuscurrentorlast | lockgroups | lockactivegroup | moveintogroup | \
# moveoutofgroup | movewindoworgroup | movegroupwindow | denywindowfromgroup | setignoregrouplock | \
# global | submap | event | setprop |
#
# mouse-left: mouse:272, mouse-right: mouse:273, scrolling: mouse_up / mouse_down
# switches like laptop lid: switch:[switch name] {hyprctl devices}
#
# you can also use bindd and add the 'description' param after the key to help new users
# l -> locked, will also work when an input inhibitor (e.g. a lockscreen) is active.
# r -> release, will trigger on release of a key. ({command 1} || {command 2}, functions similar to a toggle)
# e -> repeat, will repeat when held.
# n -> non-consuming, key/mouse events will be passed to the active window in addition to triggering the dispatcher.
# m -> mouse, see below.
# t -> transparent, cannot be shadowed by other binds.
# i -> ignore mods, will ignore modifiers.
# s -> separate, will arbitrarily combine keys between each mod/key, see [Keysym combos](#keysym-combos) above.
# d -> has description, will allow you to write a description for your bind.
# p -> bypasses the app's requests to inhibit keybinds.
#
# submaps can also be set to group inputs:
# bind = ALT, R, submap, resize
# submap = resize
# binde = , right, resizeactive, 10 0
# bind = , escape, submap, reset
# submap = reset
#
# the 'catchall' key helps in submaps to eat all inputs that are not related to the submap
#

### Starting off with some general keybinds & definitions
$modkey = SUPER
$shiftkey = SHIFT
$ctrlkey = CTRL
$altkey = ALT

$terminal = kitty
$fileManager = thunar
$browser = librewolf
$editor = ~/.config/emacs/bin/doom run

binddl = $modkey $shiftkey $ctrlkey, R, Force a restart of hyprland\'s rendering, forcerendererreload
binddl = $modkey $shiftkey $ctrlkey, Q, Quits hyprland, exit
#bindd = $altkey, Tab, Start the tabmenu, exec, DO SOMETHING

### All keybinds related to windows
bindd = $modkey, Q, Kills the active applications, killactive
bindd = $modkey, F, Toggle fullscreen, fullscreen
bindd = $modkey, V, Toggle floating, togglefloating
bindd = $modkey, M, Toggle maximize, fullscreen, 1
bindd = $modkey, S, Move window to next monitor, movewindow, mon:+1

# Move/resize windows with mainMod + LMB/RMB and dragging
binddm = $modkey, mouse:272, Drags the window with the mouse, movewindow
binddm = $modkey, mouse:273, Resizes the window with the mouse, resizewindow
bindd = $modkey, mouse_up, Changes the workspace to the previous workspace, workspace, r+1
bindd = $modkey, mouse_down, Changes the workspace to the next workspace, workspace, r-1

# Pin a window, good for drawing a reference
bindd = $modkey, P, Pins the active window to all workspaces, setfloating
bind = $modkey, P, pin

# Minimize & restore
bindd = $modkey, N, Minimize & restore apps, togglespecialworkspace, magic
bind = $modkey, N, movetoworkspace, +0
bind = $modkey, N, togglespecialworkspace, magic
bind = $modkey, N, movetoworkspace, special:magic
bind = $modkey, N, togglespecialworkspace, magic

# Move focus with mainMod + arrow keys
bindd = $modkey, left, Move focus left, movefocus, l
bindd = $modkey, right, Move focus right, movefocus, r
bindd = $modkey, up, Move focus up, movefocus, u
bindd = $modkey, down, Move focus down, movefocus, d

### Workspaces
# Switch workspaces with mainMod + [0-9]
bindd = $modkey, 1, Switch to workspace 1, workspace, r~1
bindd = $modkey, 2, Switch to workspace 2, workspace, r~2
bindd = $modkey, 3, Switch to workspace 3, workspace, r~3
bindd = $modkey, 4, Switch to workspace 4, workspace, r~4
bindd = $modkey, 5, Switch to workspace 5, workspace, r~5
bindd = $modkey, 6, Switch to workspace 6, workspace, r~6
bindd = $modkey, 7, Switch to workspace 7, workspace, r~7
bindd = $modkey, 8, Switch to workspace 8, workspace, r~8
bindd = $modkey, 9, Switch to workspace 9, workspace, r~9
bindd = $modkey, 0, Switch to workspace 10, workspace, r~10

# Move active window to a workspace with mainMod + SHIFT + [0-9]
bindd = $modkey SHIFT, 1, Switch active window to workspace 1, movetoworkspace, 1
bindd = $modkey SHIFT, 2, Switch active window to workspace 2, movetoworkspace, 2
bindd = $modkey SHIFT, 3, Switch active window to workspace 3, movetoworkspace, 3
bindd = $modkey SHIFT, 4, Switch active window to workspace 4, movetoworkspace, 4
bindd = $modkey SHIFT, 5, Switch active window to workspace 5, movetoworkspace, 5
bindd = $modkey SHIFT, 6, Switch active window to workspace 6, movetoworkspace, 6
bindd = $modkey SHIFT, 7, Switch active window to workspace 7, movetoworkspace, 7
bindd = $modkey SHIFT, 8, Switch active window to workspace 8, movetoworkspace, 8
bindd = $modkey SHIFT, 9, Switch active window to workspace 9, movetoworkspace, 9
bindd = $modkey SHIFT, 0, Switch active window to workspace 10, movetoworkspace, 10

### Launcher
bindd = $modkey $altkey, RETURN, Launch terminal, exec, $terminal
bindd = $modkey $altkey, P, Launch file browser, exec, $fileManager
bindd = $modkey $altkey, B, Launch browser, exec, $browser
bindd = $modkey $altkey, E, Launch editor, exec, $editor

### Audio
bindel = ,XF86AudioRaiseVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+
bindel = ,XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-
bindel = ,XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
bindel = ,XF86AudioMicMute, exec, wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle

### Brightness
bindel = ,XF86MonBrightnessUp, exec, light -A 5
bindel = ,XF86MonBrightnessDown, exec, light -U 5
bindel = $modkey, XF86MonBrightnessUp, exec, light -S 30
bindel = $modkey $shiftkey, XF86MonBrightnessUp, exec, light -S 70
bindel = $modkey $shiftkey $ctrlkey, XF86MonBrightnessUp, exec, light -S 100
bindel = $modkey, XF86MonBrightnessDown, exec, light -S 0

### Players such as spotify
# Requires playerctl
bindl = ,XF86AudioNext, exec, playerctl -p "spotify,%any" next
bindl = ,XF86AudioPause, exec, playerctl -p "spotify,%any" play-pause
bindl = ,XF86AudioPlay, exec, playerctl -p "spotify,%any" play-pause
bindl = ,XF86AudioPrev, exec, playerctl -p "spotify,%any" previous

### Screenshotting
# Requires hyprshot
# Screenshot a window
bind = $modkey, PRINT, exec, hyprshot -m window -o ~/Pictures/Screenshots/ -f "Screenshot from _$(date +%F) $(date +%H-%M-%S).png"
# Screenshot a monitor
bind = ,PRINT, exec, hyprshot -m output -o ~/Pictures/Screenshots/ -f "Screenshot from _$(date +%F) $(date +%H-%M-%S).png"
# Screenshot a region
bind = $shiftkey, PRINT, exec, hyprshot -m region -o ~/Pictures/Screenshots/ -f "Screenshot from _$(date +%F) $(date +%H-%M-%S).png"


### Switches (such as laptop lid closing)
bindl = , switch:Lid Switch, exec, hyprctl dispatch dpms on || hyprctl dispatch dpms off
#bindl = , switch:Lid Switch, exec, hyprctl keyword monitor "eDP-1, auto, auto, 1" || hyprctl keyword monitor "eDP-1, disable"
